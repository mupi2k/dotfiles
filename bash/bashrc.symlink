# base definitions used throughout the bashrc system:

# Usernames.  Set at least one of these.  Several functions use these later
#   For affected functions, you can also specify different users for each _USERNAME
#   For example, you can use ec2-user as the BASTION_USERNAME to connect to an EC2 instance.
#   You can also override that for a single function call or session by manually setting the variable.

AD_USER=mporter
OKTA_USERNAME=$AD_USER
BASTION_USERNAME=$AD_USER

# used by CVS, if you use that instead of git, you may need this
CVS_RSH="ssh"

# used by a few functions to allow changing the behavior when behind a firewall:
# if you are behind a corp firewall that restricts
REMOTE="YES"

# Servernames.  Set at least $BASTION_SERVER for the jump functions to work as intended.
#   If you want to have different bastion functions, you can set additional bastions as needed
#   For example: $EC2_BASTION or $SALT_BASTION

#  $BASTION_SERVER can be an IP address or resolvable SSH host (can be definined in ~/.ssh/config)
#  Specify a $BASTION_PORT for each $BASTION_SERVER unless using ssh config hosts, or port 22
BASTION_SERVER=34.223.248.104
BASTION_PORT=5190

# Paths.  Set at least $GIT_PATH to wherever you cloned the git linux resource repo to.
GIT_PATH="$HOME/.dotfiles/"
SENTINEL_PATH="$HOME/sentinel-scripts"

# Settings.  This allows you to tweak the modules loaded at run time.
#   For example, if you don't want to load IPMI modules, simply leave $USE_IPMI unset.
#   Most of these will be pulled in later...
#
USE_INTERACTIVE="yes"
# USE_IPMI="YES"
# USE_MOXA="YES"
USE_FUNCTIONS="YES"
USE_ALIASES="YES"
#USE_EIGI="YES"
USE_SCREEN="YES"
USE_VADER="YES"
USE_PIE="YES"


# This allows you to override the definitions above for specific hosts, without breaking your
#    ability to actual use git to do configs:

if [ -f $HOME/.bashrc.local ]; then
    . $HOME/.bashrc.local
fi

#  if ~/.bashrc.local doesn't exist, nothing happens.  If it does, it will be pulled in.
#    Note that using the custom-configs ability can override this.
#    Note2: This is purposefully pulled in early so that the "settings" above will be effective.
#       The trade-off is that PS1 is defined below, so you can't override it there.
#       If you *REALLY* want to override PS1, use $HOME/GIT_PATH/custom-configs/
#

##  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  ##
########### DON'T MESS WITH THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING!! ################
##  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  ##

if [ -f  $GIT_PATH/bash/bashrc ]; then
        . $GIT_PATH/bash/bashrc
fi

# If not running interactively, don't load the interactive stuff:
case $- in
    *i*) ;;
      *) return;;
esac

if [ -n $USE_INTERACTIVE ]; then
       if [ -f $GIT_PATH/bash/interactive ]; then
              . $GIT_PATH/bash/interactive
       fi
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;\u@\h: \w\a\]$PS1 "
    ;;
*)
    ;;
esac


# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

for fname in $(find $DOTFILES/custom-configs -name "*.sh*"); do
    source $fname
done

# END.
