# base definitions used throughout the bashrc system:

# Usernames.  Set at least one of these.  Several functions use these later
#   For affected functions, you can also specify different users for each _USERNAME

#   For example, you can use ec2-user as the BASTION_USERNAME to connect to an EC2 instance.
#   You can also override that for a single function call or session by manually setting the variable.

export AD_USER=mporter
export OKTA_USERNAME=$AD_USER
export BASTION_USERNAME=$AD_USER

# used by CVS, if you use that instead of git, you may need this
export CVS_RSH="ssh"

# used by a few functions to allow changing the behavior when behind a firewall:
# if you are behind a corp firewall that restricts
export REMOTE="NO"

# Servernames.  Set at least $BASTION_SERVER for the jump functions to work as intended.
#   If you want to have different bastion functions, you can set additional bastions as needed
#   For example: $EC2_BASTION or $SALT_BASTION

#  $BASTION_SERVER can be an IP address or resolvable SSH host (can be definined in ~/.ssh/config)
#  Specify a $BASTION_PORT for each $BASTION_SERVER unless using ssh config hosts, or port 22
export BASTION_SERVER=34.223.248.104
export BASTION_PORT=5190

# Paths.  Set at least $GIT_PATH to wherever you cloned the git linux resource repo to.
#  You can change this in `~/.dotfiles/custom-configs/local`, but keep in mind that if you clone this
#  this outside of ~/.dotfiles, *you need to create that file* or override this here.

export GIT_PATH="$HOME/.dotfiles"

# $DOTFILES is the "new" method.
export DOTFILES="$GIT_PATH"
export SENTINEL_PATH="$HOME/sentinel-scripts"

# Settings.  This allows you to tweak the modules loaded at run time.
#   For example, if you don't want to load IPMI modules, simply leave $USE_IPMI unset.
#   Most of these will be pulled in later...
#
export USE_INTERACTIVE="yes"
#export  USE_IPMI="YES"
#export  USE_MOXA="YES"
export USE_FUNCTIONS="YES"
export USE_ALIASES="YES"
#export USE_EIGI="YES"
export USE_SCREEN="YES"
export USE_VADER="YES"
export USE_PIE="YES"


# This allows you to override the definitions above for specific hosts, without breaking your
#    ability to actual use git to do configs:

if [ -f $DOTFILES/custom-configs/local ]; then
    . $DOTFILES/custom-configs/local
fi

#  if $DOTFILES/custom-configs/local doesn't exist, nothing happens.  
#    If it does, it will be pulled in.
#    Note: This is purposefully pulled in early so that the "settings" above will be effective.
#      Any .sh files in custom_configs/ will be pulled in later, so they can safely use
#      anything defined above or in the local file.
#

##  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  ##
########### DON'T MESS WITH THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING!! ################
##  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  ##


# If not running interactively, don't load the interactive stuff:
case $- in
    *i*) ;;
      *) return;;
esac

if [ -n $USE_INTERACTIVE ]; then
       if [ -f $GIT_PATH/bash/interactive ]; then
              . $GIT_PATH/bash/interactive
       fi
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;\u@\h: \w\a\]$PS1 "
    ;;
*)
    ;;
esac


# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

for fname in $(find $DOTFILES/default-configs -name "*.sh*"); do
  if  [ ! -f $DOTFILES/custom-configs/$(echo $fname |  awk -F/ '{print $NF}') ]; then
    source $fname 
  fi  
done

for fname in $(find $DOTFILES/custom-configs -name "*.sh*"); do
    source $fname
done

# END.
